#########################
Day 29 : 28th August 2025
#########################


	Continuous Monitoring using Prometheus/Grafana :::
	
	
	- Production Monitoring Team & Production Support Team :
	
	
	- Continuous Monitoring :::	
	
		- Is it ensure High Availability of Production Environments.
		- To Ensure Buniness Continuity
		
			- Infra-Structure Monitoring :::
				
				- Tools : Prometheus/Grafana/Dynatrace/Splunk/Nagios
				
					-> CPU Utilization 		--> Threshold Limit ==> 75%
											--> Alert/Notifications based on Threshold limit

					-> Memory Utilization 	--> Threshold Limit ==> 75%
											--> Alert/Notifications based on Threshold limit
		
			- Application Monitoring :
			
				- Tools : AppDynamics/DataDog 	
				
				
				
	- Prometheus/Grafana :::
		
		- Prometheus 	::	==> Is a Monitoring Tool.
								Is used to Monitoring the Infra-Structure
							
							
		- Grafana 		:: 	==> Is a Visualization Tool.
								Is used to Create Monitoring Dashboards based on the Monitoring Metrics from Monitoring Tools like Prometheus.
		

		- Architecture of Monitoring Tools/Services
		
		- Architecture Components
		
			- Monitoring Server 
			- Target Nodes 
			- Monitoring Agent - Node Exporter
			- Retrieval Component used to Pull the metrics from Target Service using Monitoring Agents
			- Time Series Database 
	
	
	
	- Managed Services :
	
		- AWS			 ==> Cloud watch 
		- Azure 		 ==> Azure Monitor
		- GCP 			 ==> G Montior		
		
	- Working with Prometheus & Grafana ::
	
		- Install and Config Prometheus & Grafana.
		

  #Install Prometheus & Grafana :

Launch 2 VMs --> (1-Monitoring Server(Prometheus&Grafana) / 1-TargetServer(Node_Exporter))
 
add Inbound Rules --> 9090/3000/9100 / Allow All Traffic



- AMI - Amazon machine linux
- key pair 
- launch 2 isntance
- instance type- t2 micro
- security group of instances, edit inbound rule
- clidk on add rule- for 9090/3000/9100 / Allow All Traffic
     all traffice - 0.0.0/0
- Rename it has monitoring server, and target node server
- login into monitoring server
- sudo -i
- yum update -y

### Goto https://prometheus.io/download/
sudo -i
yum update -y 
goto the prometheus downloads page
right click and copy link address:
#https://github.com/prometheus/prometheus/releases/download/v3.4.1/prometheus-3.4.1.linux-amd64.tar.gz
#https://github.com/prometheus/prometheus/releases/download/v3.6.0-rc.0/prometheus-3.6.0-rc.0.linux-amd64.tar.gz
wget https://github.com/prometheus/prometheus/releases/download/v2.38.0/prometheus-2.38.0.linux-amd64.tar.gz
tar -zxvf prometheus-2.38.0.linux-amd64.tar.gz
#mv prometheus-2.38.0.linux-amd64.tar.gz prometheus
###===> Create following file:
sudo vi /etc/systemd/system/prometheus.service
#-------------------------------------------------------------------------

[Unit]
Description=Prometheus Server
Documentation=https://prometheus.io/docs/introduction/overview/
After=network-online.target

[Service]
User=root
Restart=on-failure

ExecStart=/root/prometheus-2.38.0.linux-amd64/prometheus --config.file=/root/prometheus-2.38.0.linux-amd64/prometheus.yml

[Install]
WantedBy=multi-user.target

#-------------------------------------------------------------------------

sudo systemctl daemon-reload
sudo systemctl status prometheus
sudo systemctl start prometheus

<prometheus-external-ip>:9090
http://43.205.177.74:9090/
http://43.205.177.74:9090/



####*************************************	**********************************


- login into target nodeserver
- sudo -i
- yum update -y


###Install Node Exporters:

### Goto https://prometheus.io/download/

## Search for Node Exporter:
##Copy Link Linux address
### https://github.com/prometheus/node_exporter/releases/download/v1.4.0-rc.0/node_exporter-1.4.0-rc.0.linux-amd64.tar.gz

#https://github.com/prometheus/node_exporter/releases/download/v1.9.1/node_exporter-1.9.1.darwin-arm64.tar.gz

#https://github.com/prometheus/node_exporter/releases/download/v1.9.1/node_exporter-1.9.1.linux-amd64.tar.gz

wget https://github.com/prometheus/node_exporter/releases/download/v1.4.0-rc.0/node_exporter-1.4.0-rc.0.linux-amd64.tar.gz



tar -zxvf node_exporter-1.4.0-rc.0.linux-amd64.tar.gz

###===> Create following file:

sudo vi /etc/systemd/system/node_exporter.service
#-------------------------------------------------------------------------

[Unit]
Description=Prometheus Server
Documentation=https://prometheus.io/docs/introduction/overview/
After=network-online.target

[Service]
User=root
Restart=on-failure

ExecStart=/root/node_exporter-1.4.0-rc.0.linux-amd64/node_exporter

[Install]
WantedBy=multi-user.target

#-------------------------------------------------------------------------

sudo systemctl daemon-reload
sudo systemctl status node_exporter
sudo systemctl start node_exporter

- ip adress of target node server:9091/metrics

-
hostname

hostname -i

### copy the IP Address of the server you wish to monitor

## Goto to Prometheus Server ::

### installation path 
cd /root/prometheus-2.38.0.linux-amd64

vi prometheus.yml
## Add the target with valid node_exporter port as mentioned below:

- targets: ["172.31.34.133:9100"]  # Take the private IP Address of Target_Node.


## Restart Prometheus:

sudo systemctl restart prometheus
sudo systemctl status prometheus

###Goto Prometheus server :

<prometheus-external-ip>:9090
http://13.232.146.141:9090/

## in the query field type up and click on execute to see the list of servers up for monitoring



######################################################################################################


- In Monitor server:

#Install Grafana :

### Goto https://grafana.com/grafana/download

###select OSS Edition.
#Choose Linux

##  Linux Distribution :

Red Hat, CentOS, RHEL, and Fedora(64 Bit)SHA256: 

 -y https://dl.grafana.com/oss/release/grafana-11.1.0-1.x86_64.rpm


sudo yum install -y https://dl.grafana.com/oss/release/grafana-11.1.0-1.x86_64.rpm


sudo /bin/systemctl enable grafana-server.service
sudo /bin/systemctl start grafana-server.service
sudo /bin/systemctl status grafana-server.service

<grafana-external-ip>:3000
http://13.203.66.61:3000/

default user name & password : admin & admin


###*********************************************************************
##*******************************************************************************************************

###Create Prometheus Data Source in Grafana

###Goto Grafana 

##<grafana-external-ip>:3000
##http://13.232.146.141:3000/

Click on settings button --> Data Source --> Add Data Source --> Select Prometheus

http://13.127.218.51/:9090/

http://43.204.38.168:9090/

Enter in the Name field as Prometheus
Enter in the url field as the prometheus-server url with port eg.: <prometheus-external-ip>:9090 | http://13.232.146.141:9090/

Click on Save & Test --- for Data Source is working 
Click on Back Button
See the Prometheus Data Source Created 

- click on home page, click on dashboards, click on create dashboard
- cick on add visualization
- select timeseries , in code give -sum by(mode)(irate(node_cpu_seconds_total{mode!="idle"}[5m])) > 0
- you can see the chart now



Test in Prometheus-server query 

https://prometheus.io/docs/prometheus/latest/querying/examples/

sum by(mode)(irate(node_cpu_seconds_total{mode!="idle"}[5m])) > 0

sum by(mode)(irate(node_cpu_seconds_total{mode!="idle"}[5m])) > 0

Goto grafana and cl

time() - node_boot_time_seconds{}

100 * (1 - ((avg_over_time(node_memory_MemFree_bytes[10m]) + avg_over_time(node_memory_Cached_bytes[10m]) + avg_over_time(node_memory_Buffers_bytes[10m])) / avg_over_time(node_memory_MemTotal_bytes[10m])))

time() - node_boot_time_seconds{}#Install Prometheus & Grafana :

Launch 2 VMs --> (1-Monitoring Server(Prometheus&Grafana) / 1-TargetServer(Node_Exporter))
 
add Inbound Rules --> 9090/3000/9100 / Allow All Traffic



		- PromQL 	==> Query Language.
		







 
Next :::
	
	- Kubernetes ::::	
	
		- Helm Package Manager for Kubernetes Cluster.
		
			- Using Helm we can setup Prometheus & Grafana to Monitor Kubernetes Cluster.
			
			- Helm can be install in only on Kubernetes Master.
		
#########################
Day 30 : 29th August 2025
#########################


		- Helm Package Manager for Kubernetes Cluster.
		
			https://helm.sh/docs/intro/install/
		
		
		- # Prometheus & Grafana on Kubernetes using Helm 




- login to Kubernetes Master



HELM Chart:::
Helm is a pkg manager for kubernetes
which help to automatically create manifest files for any kubernetes objects in the form of HELM Charts

HELM Chart for prometheus

Eg.: Kubernetes Dashboard installation using HELM

Install HELM   https://helm.sh/docs/intro/install/

#https://get.helm.sh/helm-v3.18.3-linux-amd64.tar.gz

	- Goto https://github.com/helm/helm/releases

	- right click on Linux amd64 and copy link address.

on kubernetes master node install Helm

#Downlaod helm tar ball for linux

wget https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz

#Extract tar ball

tar -zxvf helm-v3.14.0-linux-amd64.tar.gz 

#Move helm to usr/local/bin/helm
sudo mv linux-amd64/helm /usr/local/bin/helm

#run helm
helm

################################################################################################333333

# Prometheus & Grafana on Kubernetes using Helm 

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm search repo prometheus-community
helm search repo prometheus-community/kube-prometheus-stack
helm search repo prometheus-community/kube-prometheus-stack --versions
helm install prometheus prometheus-community/kube-prometheus-stack --version 45.7.1 --namespace monitoring --create-namespace
kubectl get pods -n monitoring
kubectl get pods --all-namespace
kubectl get svc
kubectl get svc -n monitoring
//kubectl port-forward svc/prometheus-operated -n monitoring 9090:9090
//kubectl edit svc prometheus-operated
kubectl get svc -n monitoring
//kubectl edit svc prometheus-operated -n monitoring
kubectl edit svc prometheus-kube-prometheus-prometheus -n monitoring
#goto type: key && Change ClusterIP to NodePort & save the file
#30000 - 32767 
#Now check the service, it should show you, NortPort with Nodeport IP
kubectl get svc -n monitoring
kubectl edit svc prometheus-grafana -n monitoring
#goto type: key && Change ClusterIP to NodePort & save the file
#30000 - 32767 
#Now check the service, it should show you, NortPort with Nodeport IP
kubectl get svc -n monitoring



Take the public_ip address fo kubernetes master node. 
Eg>: https://<k_master_public_ip_address:<NodePort>/

Prometheus:
13.201.35.181:32275

Grafana:
13.201.35.181:32667

###########Grafana Dashboard :

#User Name : admin
#Password: prom-operator

############################################################################################################################
