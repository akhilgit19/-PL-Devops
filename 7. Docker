########################
Day 17 : 5th August 2025
########################

	- Docker Module ::
	
	- Containerization :
	
		- It is a process of packaging the applications along with its dependencies.
		
	- Virtual Machine :::
	
		- VM is called as a Hardware Level Virtualization 
		- VMs are create using Hyervisor
		- VMs are used to execute Operating System 
		- VMs will be up and running even if there is not active application/task
		- VMs consume more space and time to start-up the service.
	
	- Container :::

		- Container is called as a OS Level Virtualization 
		- Containers are create using Container Engine 
		- Containers are used to execute Application/Task, NOT Operating System
		- Containers will immediately go to exit state if there is no active Application/Task
		- Containers consume less space and time to start-up the service.	
		
		- Container uses the core properties of underlying Operating System
			- Core of OS - Kernel 			
				- Namespaces 
				- Control Groups 
				
			- Container run it is own isolate address space
			
		- Containers can reduce the no. of VMs 
			- We cannot completely elimate VM.
			
	
	- Terminologies ::
	
		- Container Engine 		
					# It is used to create and manage the Container Images and Containers
		
		- Container Image		
					# Container Image is a static file, the defines the properties of application and its dependencies
					# Container Image composed of various layers created using Dockerfile Instructions
					# Container Images are Non-Executable
					
		- Container	
					# Containers are the Executable units of Container Images.					
		
		- Container Registry:
					# Container Registry is used to maintain/Version Control the Container Images 
					# DockerHub is a default Container Registry for Docker Container Engine 
					https://hub.docker.com/
					
					
					Source Code Repo			Artifactory Library 				Container Registry

					github						jfrog/azArtifacts					DockerHub/ACR/ECR
								
					webapp.java_v1.0	==>		webapp.war_snapshot_V1.0	==> 	webapp_img:v1.0
					webapp.java_v1.1	==>		webapp.war_snapshot_V1.1	==>		webapp_img:v1.1
					
		- Container Repositories :
					# Container Repositories are the subset of Container Registry
			
	- Containerization :
	
		- It is a process of packaging the applications along with its dependencies.		

		
	Working with Containers :
	
	
	- Infra-Structure Perspective ::
		
		- Here, Using Container we can reduce the no. of VMs 
		- This we we can reduce the Infra-Structure Cost

		Jenkins_Master (VM)				
											==> Install Git, JDK, Jenkins											
										
			Jenkins_SlaveNode1 (VM1)		==> Java Build Tools					
			Jenkins_SlaveNode1 (VM1.1)		==> Java Build 						
			Jenkins_SlaveNode1 (VM2)		==> Python
			Jenkins_SlaveNode1 (VM3)		==> .Net
			Jenkins_SlaveNode1 (VM4)		==> Angular/Nodejs
			Jenkins_SlaveNode1 (VM5)		==> Ruby
				
		Using Docker :
		
		Jenkins_Master (VM)				
			Jenkins_Build_Server_Node (VM1)
				- Install Container Engine
						Create 	C1			==> Java Build Tools	
								C2          ==> Java Build 		
								C3          ==> Python
								C4          ==> .Net
								C5          ==> Angular/Nodejs
								C6          ==> Ruby
	
	
	- Developers/Deployment Perspective ::

	- Containerization :
	
		- It is a process of packaging the applications along with its dependencies.
		
		Role of Developers :
		
			In Dev Environment :
			
				Create Source Code 
				
				Create Artifacts				mywebapp.war 
					- jdk17, tomcat:8.0

				Unit Testing 
				
					Package the Application : (mywebapp.war,jdk17,tomcat:8.0)	==> Create Application Image : mywebappimg:v1.0
					
					Publish the Image - mywebappimg:v1.0 to Container Registry
				
				Promote the artifacts to Test Environments
				
			
			QA 			
				- pull the Application Image : mywebappimg:v1.0 from Container Registry
				- Create Container out of it.

				
			UAT	
				- pull the Application Image : mywebappimg:v1.0 from Container Registry
				- Create Container out of it. 


			PROD 
				- pull the Application Image : mywebappimg:v1.0 from Container Registry
				- Create Container out of it. 
							
							
							
Next ::

	Working with Docker :
	
		- Install Docker Container Engine 
		- Docker Cli Commands 
	


########################
Day 18 : 7th August 2025
########################	


- Login to slave node (build server)
- sudo -i 


	Working with Docker :
	
		- Install Docker Container Engine 
		- Docker Cli Commands 			

-	Installation of Container Engine :
	
		apt install docker.io -y			# Install Docker Container Engine in Jenkins Slave-Node/Build Server
	
	Docker Cli Commands :	
	
		docker --version
		
		docker images				# List the Images  
		
		docker ps 					# List the Active/running Containers
		
		docker ps -a 				# List all the Container (Active & In-Active)		
		
		Login to DockerHub Console :
		
		Explore the Images!

- If you want to work with any image, click on the tags
		
		docker pull <image_name>		# To download a latest version of Container Image from DockerHub to Local Machine 
		
		docker pull <image_name>:<tag>	# To download a specific version of Container Image from DockerHub to Local Machine 
		
		docker run <image_name>			# To create a Container based on Container Image 
		
- docker pull ubuntu 
- if you say docker images, you can see the image and image ID size,

oot@ip-172-31-30-243:/# docker pull ubuntu 
Using default tag: latest
latest: Pulling from library/ubuntu
b71466b94f26: Pull complete 
Digest: sha256:7c06e91f61fa88c08cc74f7e1b7c69ae24910d745357e0dfe1d2c0322aaf20f9
Status: Downloaded newer image for ubuntu:latest
docker.io/library/ubuntu:latest
root@ip-172-31-30-243:/# docker images  
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
ubuntu       latest    e0f16e6366fe   4 weeks ago   78.1MB


- creating container- docker run  ubuntu 
- docker ps (show the running container)
root@ip-172-31-30-243:/# docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
- docker ps -a(show all the containers)
root@ip-172-31-30-243:/# docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES
dde7fec3167d   ubuntu    "/bin/bash"   11 seconds ago   Exited (0) 10 seconds ago             sweet_wilson

- docker run ubuntu sleep 30

root@ip-172-31-30-243:/# docker run ubuntu sleep 30
root@ip-172-31-30-243:/# docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS                          PORTS     NAMES
9bd463eb9137   ubuntu    "sleep 30"    41 seconds ago       Exited (0) 10 seconds ago                 reverent_sanderson
dde7fec3167d   ubuntu    "/bin/bash"   About a minute ago   Exited (0) About a minute ago             sweet_wilson

 
		Three Modes of Container Execution :
		
		- Foreground/Attached Mode :
		
			docker run <image_name> 
			
			Eg.:
			
				docker run ubuntu sleep 20
		
		- Background/Detached Mode :
		
			docker run -d <image_name> 
			
			Eg.: 
			
				docker run -d ubuntu sleep 20

root@ip-172-31-30-243:/# docker run -d ubuntu sleep 20
920a718d212b2b528ade8eee41dc13ddd6c977bf67c8c082e44a181c62bb79b9
root@ip-172-31-30-243:/# 

root@ip-172-31-30-243:/# docker ps -a
CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES
920a718d212b   ubuntu    "sleep 20"    13 seconds ago   Up 12 seconds                        optimistic_blackburn
9bd463eb9137   ubuntu    "sleep 30"    2 minutes ago    Exited (0) 2 minutes ago             reverent_sanderson
dde7fec3167d   ubuntu    "/bin/bash"   3 minutes ago    Exited (0) 3 minutes ago             sweet_wilson
root@ip-172-31-30-243:/# 


		- Interactive Mode :
		
			docker run -it <image_name>
			
			Eg.: 
			
				docker run -it ubuntu bash
				
				exit							# Exit/stop the Container  
		
		- docker start <Container_ID> 			# Start the Container
		
		- Login to Running Container :
		
			docker exec -it <Container_ID> bash 
			
			Eg.:
			
			docker exec -it 092dc9986518 bash
		
			exit 								# Log-off from the Container 
			
		- docker stop <Container_ID> 			# Stop the Running Container 
		



- docker run alpine


		- Port Mapping/Port Binding :::
		
			- It is used to expose the Container Application to Internet.			
			
			docker run -it -p 8085:8080 tomcat:8.0 			
		
				-p <host_port>:<container_port>
			
				Access the Application running inside the container using port mapping :
			    Enable inbount rule in VM(Slave node at 8085 or allow all traffice
				<external_ip_addr>:<host_port>
				
				43.204.233.96:8085
				

oot@ip-172-31-30-243:~# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
ubuntu       latest    e0f16e6366fe   4 weeks ago   78.1MB
alpine       latest    9234e8fb04c4   6 weeks ago   8.31MB
tomcat       8.0       ef6a7c98d192   6 years ago   356MB
root@ip-172-31-30-243:~# docker ps 
CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS         PORTS                                         NAMES
11ffc627b9b8   tomcat:8.0   "catalina.sh run"   2 minutes ago   Up 2 minutes   0.0.0.0:8085->8080/tcp, [::]:8085->8080/tcp   wonderful_poincare
root@ip-172-31-30-243:~# docker ps -a
CONTAINER ID   IMAGE        COMMAND             CREATED          STATUS                       PORTS                                         NAMES
11ffc627b9b8   tomcat:8.0   "catalina.sh run"   2 minutes ago    Up 2 minutes                 0.0.0.0:8085->8080/tcp, [::]:8085->8080/tcp   wonderful_poincare
49308a625067   alpine       "/bin/sh"           2 minutes ago    Exited (0) 2 minutes ago                                                   nervous_banzai
b1298bfe0891   ubuntu       "bash"              5 minutes ago    Exited (137) 3 minutes ago                                                 nervous_kapitsa
920a718d212b   ubuntu       "sleep 20"          9 minutes ago    Exited (0) 8 minutes ago                                                   optimistic_blackburn
9bd463eb9137   ubuntu       "sleep 30"          11 minutes ago   Exited (0) 10 minutes ago                                                  reverent_sanderson
dde7fec3167d   ubuntu       "/bin/bash"         11 minutes ago   Exited (0) 11 minutes ago                                                  sweet_wilson
root@ip-172-31-30-243:~# 


		- Remove Containers & Images from Local Machine!
		
			- docker rmi <image_name>			# To Remove Container Images 
			
			- docker rm <Container_ID>			# To Remove Containers 
				
				
		- Docker Volume ::::
		
			- Container are basically used to execute application/task.			
			- Containers are actually used to run the stateless application.
			
			- This is to maintain pesistant data!
			
		3-Tier Application Architecture ????
		
			Sign_in Micro-Service
			
				- Front-End Layer	==> User Interaction 	=> C1 
				
				- Application Layer	==> Business Logic		=> C2 
				
				- Back-End Layer	==> Database 			=> C3 
		


Next : 
			Work with Containers 
			Build Images 
			Container Orchestration Tools & Concepts


########################
Day 19 : 8th August 2025
########################		
	
	Docker Volumes :::
	
		- Docker Volume ::::
		
			- Container are basically used to execute application/task.			
			- Containers are actually used to run the stateless application.
			
			- This is to maintain pesistant data!	
			
		Stateless application :
		
			- Application that never retain the state of execution 
		
		Stateful application :
		
			- To work with the stateful applications, Docker Volumes can be used.
			
			
		docker volume list 					# List the Docker Volumes 
		
		docker volume create pl-vol1		# Create a docker volume 
		
		docker volume inspect pl-vol1		# Inpect/Get the Properties of Volume
		
		docker run -it --mount source=pl-vol1,destination=/pl-vol1 ubuntu bash  

- Start the slavenode (build node)
- login to slave node VM
- docker ps ( show the running containers
- docker images 
- docker run -it ubuntu bash ( it creates ubuntu container in interactive mode)
- root@5c26dcb5acd4:/# ls
bin bood dev etc home lib lib64 media mnt opti pro root 
- root@5c26dcb5acd4:/# exit
exit
- root@ip-172-31-3-184:# docker volume list
- create a new volume
- docker volume create pl-vol1
- if you list now you can see the volume
	root@ip-172-31-3-184:# docker volume ist
 DRIVER    VOLUME NAME
local       pl-vol1
- docker volume inspect pl-vol1
[
   {
         "createdAt" "2025-08-08T14:46:36Z",
         "Driver": "local",
         "Labels": null,
         "Mountpoint": "/var/lib/docker/volumes/pl-vol1/_data",
         "Name": "pl-vol1",
         "Options": null,
         "Scope": "local"
    }
]

- cd /var/lib/docker/volumes/
- ls
- you can see pl-vol1
- cd pl-vol1
- cd _data
- here is the persistent data will be store
- docker run -it --mount source=pl-vol1,destination=/pl-vol1 ubuntu bash  
- ls 
-  you will see the volume 
bin boot dev etc home lib lib64 media mnt optio pl-vol1 proc root run sbin srv sys  tmp usr var
- cd pl-vol1/
- pwd
/pl-vol1
- root@21330000984d76: /pl-vol1# echo "rec1" >> outfile.txt
- root@21330000984d76: /pl-vol1# ls
outfile.txt
- root@21330000984d76: /pl-vol1# exit
exit
- Now if you give docker ps, no container is upon running
- docker ps -a (you will see the container in exit state)
- if u give ls command you can see the file
- pwd
/var/lib/docker/volumes/pl-vol1/_data"
-root@ip-172-31-3-184:/var/lib/docker/volumes/pl-vol1/_data # cat outfile.txt
rec1
-root@ip-172-31-3-184:/var/lib/docker/volumes/pl-vol1/_data # echo "rec1" >> infile1.txt
- ls
infile1.txt outfile.txt
-root@ip-172-31-3-184:/var/lib/docker/volumes/pl-vol1/_data # docker run -it --mount source=pl-vol1,destination=/pl-vol1 ubuntu bash
-root@ip-172-31-3-184:/# ls
bin boot dev etc home lib lib64 media mnt optio pl-vol1 proc root run sbin srv sys  tmp usr var
-root@ip-172-31-3-184:# cd pl-vol1
-root@ip-172-31-3-184:/pl-vol1# ks
infile1.txt outfile.txt
-root@ip-172-31-3-184:/pl-vol1#
- if i want 500TB in the main storage VM it cannot be possible 
  so docker volume cannot be attached to container vlevel it should be attached to sservice level like EBS etc





Usage:  docker volume COMMAND

Manage volumes

Commands:
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove unused local volumes
  rm          Remove one or more volumes
  update      Update a volume (cluster volumes only)


	Create Container Images :::
	
	- docker commit :::
		
		=> To Create a New Container Image based on the properties of existing Container.
		
			Syntax :

				docker commit <existing_container_id> <dockerhub_repo_name>/New_Image_Name>:<tag_Name>
				
				docker commit 83d261074037 loksaieta/pl-mvn-env-img:v1.0

				
	- docker build :::
	
		- To create a new Container Image based on the Dockerfile reference.
		- Dockerfile composed of Instructions to Create Docker Container Images
		- Application Developers create the Dockerfile and update in the Source Code Repository. 
		
			Syntax :
			
			docker build -t <dockerhub_repo_name>/New_Image_Name>:<tag_Name> .		# '.' refers to the Dockerfile path
			
			docker build -t loksaieta/pl-mvn-env-img1 .
			
		vi Dockerfile 
		
			FROM ubuntu 
			RUN apt update -y 
			RUN apt install git -y 
			RUN apt install maven -y
			
			
	- docker push :::
	
		- To Publish the Image to Remote DockerHub Repository.
		
		
		- Access Token : PAT 
		
		
			docker login -u loksaieta
		
			dcasdfsdsdfsdJY
			
			docker push loksaieta/pl-mvn-env-img1
			
			docker push loksaieta/pl-mvn-env-img:v1.0



Creating build container in Slave Machine:
================================================
- In my slave machine, creating a build docker container
- docker ps -a
- docker run -it ubuntu bash
- it will create one new container 
- you will be inside the container and give this ls command
root@6f4924764c6b:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

- git --version (you will not found)
- apt update -y (update the default packages)
- apt install git -y
- git --version
- apt install maven -y
- mvn --version
- if i exit  give exit
exit
- and to start again
 docker ps
 docker start 83d26109888
 docker exec -it 83d26109888 bash
- git --version


docker commit:
In the dockerhub, In my hub, click on repositories , click on create repository
- repository name

	docker commit <existing_container_id> <dockerhub_repo_name>/New_Image_Name>:<tag_Name>
				
	docker commit 83d261074037 loksaieta/pl-mvn-env-img:v1.0

above command create  anew image in local repo based on previous container 
- docker images
loksaieta/pl-mvn-env-img:v1.0

- docker run -it loksaieta/pl-mvn-env-img:v1.0 bash
- git --vesion


docker build:
- mkdir docker-contents
- cd docker-contents/
- docker-contents/ pwd
/root/docker-contents/
- vi Dockerfile
			FROM ubuntu 
			RUN apt update -y 
			RUN apt install git -y 
			RUN apt install maven -y
- you can run below commands			
Syntax :
			
docker build -t <dockerhub_repo_name>/New_Image_Name>:<tag_Name> .		# '.' refers to the Dockerfile path
			
docker build -t loksaieta/pl-mvn-env-img1 .

- docker images (you will see new image -loksaieta/pl-mvn-env-img1


Docker push:
- click on profile in docker hub, click on account settings
- In the left side , click on personal access tokens
- click on generate new token
- token name pl-test-part1
- expiration datays -90 days
- access- read write delete
- click on generate

dckr_pat_kdbNbaN7_znJD5BBX3chEmt7Hs4
docker login -u akhilpagadapoola


- once u run:  docker login -u akhilpagadapoola
- you will be asked for token give the generated token- dcasdfsdsdfsdJY.
-
	docker push loksaieta/pl-mvn-env-img1
	docker push loksaieta/pl-mvn-env-img:v1.0
- now if you go to repository you can see the image
- click on the image , you can see image layers

docker stop 83d26109888


Container Orchestration ::
	

		- Overview of Docker Compose :::
		
			- Used to execute multiple containers as a Service. 
			- The Container specification will be defined in a manifest file - written using *.yaml script.
			
			- Install and configure docker compose 
				https://docs.docker.com/compose/install/
				
				https://docs.docker.com/compose/install/linux/#install-the-plugin-manually
				

		3-Tier Application Architecture ????
		
			Sign_in Micro-Service		
			
				- Front-End Layer	==> User Interaction 	=> C1 
				
				- Application Layer	==> Business Logic		=> C2 
				
				- Back-End Layer	==> Database 			=> C3 


				- Front-End Layer	==> User Interaction 	=> C1.1,1.2,1.3 
				
				- Application Layer	==> Business Logic		=> C2.1,2.2,2.3
				
				- Back-End Layer	==> Database 			=> C3.1,3.2,3.3

		Work with Docker Compose ::
		
			Install Docker_Compose
			
			https://docs.docker.com/compose/install/linux/
			
# Manual Installation of Docker Compose :::
			
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
	
docker compose version

vi docker-compose.yaml



### Yaml Files are based on Keys & Values -- key:value Pairs

version: '3'
services:
  webserv1:
    image: "tomcat:8.0"
    ports:
      - 8098:8080
  dbserv1:
    image: "redis:alpine"
	
docker compose up 

docker compose down 

docker ps

				
		- Overview of Docker Swarm :::
		
			- Docker Swarm is one the Container Orchestration Tools.
			- It is meant only for Docker Containers.
			- Used to Ensure High Availability of Containers by creating Replicas of Containers.
			- We cannot Do Auto-Scaling or Load Balancing!
				
		- Kubernetes!
		
		Docker Container : 
		
		AWS :	ECS/ECR/EKS
		
		Azure : ACS/ACR/AKS
		
		GCP :	GCE/GCR/GKE

		- Kubernetes!
		
			- It is a Open-Source Container Orchestration Tool 
			- Kubernetes is used to Deploy any type of Containers.
			- It is used to ensure high availability of the Applications/services running thru Containers.
			- Used to Ensure High Availability of Containers by creating Replicas of Containers.
			- It supports Auto-Scaling & Load Balancing.		
			
			- App Config file - Manifest file - *.yaml / *.json


#########################
Day 20 : 11th August 2025
#########################		
		
	- Containerization :::
		
		- Docker Build Command to create any Container Image
		
		- Create Dockerfile & maintained in the Source Code Repository
		
	
	- Source Code Repo. URL 
	
	- Create a CICD Pipeline using Jenkins :
	
	- Servers & Tools :
		
		Jenkins_Master 			==> Create CICD Pipeline Projects and Schedule to run in the resp. Agents 
								==> git,jdk,jenkins 
								
			Jenkins_Build_Server_Node	==> Perform Application Build 
										==> git,jdk,maven,docker
	

	- Add devopsadmin user to docker group :
	
		usermod -aG docker devopsadmin


		
	- CICD Pipeline Stages :
	
		Input : 	Source Code Repo. URL 
		
		Output :	Application Artifacts, Application Container Image, Publish to Container Registry.
		
		
		Pipeline :

			- SCM-Checkout                        (using git)
			- Application_Build 			*.war (using maven)
			- Application_Image_Build              (using docker)
			- Publish Application_Image to Container Registry(using DockerHub)
			
		Dockerfile :

			FROM ubuntu 
			RUN apt update -y 
			RUN apt install git -y 
			RUN apt install maven -y
					
		
		FROM tomcat:8.0
		COPY ./target/*.war /usr/local/tomcat/webapps
		EXPOSE 8080		
		
		
		Dockerfile Instructions :
		
		FROM 			# This is identify the based Image 
		
		RUN				# To execute any package manager

		COPY 			# To Copy the files from host volume to container volume 
		
		CP				# To Copy the files within the Container Volume 
		
		ADD 			# To Copy/Download the files from external URLs to Container Volume 

		EXPOSE			# To set the Container Port.
		
		WORKDIR			# To Set the Current Working Directory
		
		CMD				# To Set the default Start-up Task to start a Container 
						# The Start-up Task can be Modified at the time of Container Creation 
						
		ENTRYPOINT		# To Set the default Start-up Task to start a Container 
						# The Start-up Task cannot be Modified at the time of Container Creation 						
		

- In Slave Node:c
- Login to your slave node machine.
- sudo -i
- docker images ( You can see all the images as a root user
- su - devopsadmin ( if you login as a devopsadmin user it will throw as errror while createting docker images)
- So whenver im communicating from master to slave i will user devopsadmin user
- So simple we have to add the devopsadmin user to docker group
- usermod -aG docker devopsadmin
- su - devopsadmin
- docker images( Now you will not get any permission error)

- cd workspace/PL-CICD_Pipeline_MavenProjects1
- ls

devopsadmin@ip-172-31-30-243:~/workspace/PL-CICD-Pipeline-Project1$ ls
Dockerfile  README.md  bin  kdeploy.yaml  mvnw  mvnw.cmd  pom.xml  src  target

- pwd
/home/devopsadmin/workspace/PL-CICD_Pipeline_MavenProjects1
- cat Dockerfile
		FROM tomcat:8.0
		COPY ./target/*.war /usr/local/tomcat/webapps/
		EXPOSE 8080		

- docker  build -t <imagename> .
- exit , you will get into root user

- Restart the slave node give reboot command 


reference::
dckr_pat_kdbNbaN7_znJD5BBX3chEmt7Hs4
docker login -u akhilpagadapoola

*******

- Now go to manage jenkins, In security, credentials
- click on global and click on add credential
- kind - username and password
- id - dockerlogind
- description -dockerloginid
- username- loksaieta
- password - personal access docker token-  dckr_pat_kdbNbaN7_znJD5BBX3chEmt7Hs4
- click on create



- From master node copy the ip adress and open in the browser
- open PL-CICD_Pipeline_MavenProjects1 job
- In trigggers  copy below pipeline and paste it

- CICD Pipeline using Docker:




	
pipeline {
    agent { label 'slave1' }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
        }
		
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
                sh 'mvn clean package'
            }
        }
		
        stage('Build Docker Image') {
            steps {

				sh "docker build -t akhilpagadapoola/pl-javawebappimg ."
				
            }
        }
		
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push akhilpagadapoola/pl-javawebappimg"
			}
		}

    }
}


- click on build

- now in slave node
- sudo -i
- su - devopsadmin
- docker images
REPOSITORY                   TAG      IMAGE ID              CREATED               SIZE
loksaieta/pl-javawebappimg   latest   0022d38bb3f2           57 ago               420 MB

You can check now in slave node target container.

In slave
- sudo -i
- su - devopsadmin
- docker run -it loksaieta/pl-javawebappimg bash (running container via interactive mode)
root@3828ba7dfaa2:/user/local/tomcat# ls
LICENSE   NOTICE   RELEASE-NOTES   RUNNING.txt   bin   conf  include lib logs native-jni-lib   temp webapps work
-
root@3828ba7dfaa2:/user/local/tomcat# cd webapps/
- ls
- ROOT demo-1.0-SNAPSHOT.war docs examples host-manager  manager
-root@3828ba7dfaa2:/user/local/tomcatwebapps#

- Now i want to run the container as webservice
- docker run -t -p 8080:8080 loksaieta/pl-javawebappimg
- now it will start the tomcat service
- copy the slave node public ip curl http:/publicip:8080/demo-1.0-SNAPSHOT.war
- You will see the webpage



Started by user akhilp
[Pipeline] Start of Pipeline
[Pipeline] node
Running on JavaMvnBuildServer1 in /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $DOCKERHUB_CREDENTIALS or $DOCKERHUB_CREDENTIALS_PSW
[Pipeline] {
[Pipeline] stage
[Pipeline] { (SCM_Checkout)
[Pipeline] echo
Perform SCM_Checkout from github repository
[Pipeline] git
The recommended git tool is: NONE
No credentials specified
Fetching changes from the remote Git repository
 > git rev-parse --resolve-git-dir /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/.git # timeout=10
Checking out Revision 353876657987eb5da3702c042a912e50ad99add1 (refs/remotes/origin/master)
Commit message: "Create kdeploy.yaml"
 > git config remote.origin.url https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git # timeout=10
Fetching upstream changes from https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
 > git fetch --tags --force --progress -- https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D master # timeout=10
 > git checkout -b master 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
 > git rev-list --no-walk 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Application Build)
[Pipeline] echo
Perform Maven Application Build
[Pipeline] sh
+ mvn clean package
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--------------------------< [0;36mcom.loksai:demo[0;1m >---------------------------[m
[[1;34mINFO[m] [1mBuilding demo 1.0-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ war ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:3.3.2:clean[m [1m(default-clean)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Deleting /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Copying 1 resource from src/main/resources to target/classes
[[1;34mINFO[m] Copying 0 resource from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:compile[m [1m(default-compile)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :source
[[1;34mINFO[m] Compiling 2 source files with javac [debug release 17] to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:testCompile[m [1m(default-testCompile)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :dependency
[[1;34mINFO[m] Compiling 1 source file with javac [debug release 17] to target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:3.1.2:test[m [1m(default-test)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[[1;34mINFO[m] 
[[1;34mINFO[m] -------------------------------------------------------
[[1;34mINFO[m]  T E S T S
[[1;34mINFO[m] -------------------------------------------------------
[[1;34mINFO[m] Running com.loksai.demo.[1mDemoApplicationTests[m
05:25:22.907 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.loksai.demo.DemoApplicationTests]: DemoApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
05:25:23.147 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.loksai.demo.DemoApplication for test class com.loksai.demo.DemoApplicationTests

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.3)

2025-08-30T05:25:24.104Z  INFO 1626 --- [           main] com.loksai.demo.DemoApplicationTests     : Starting DemoApplicationTests using Java 17.0.16 with PID 1626 (started by devopsadmin in /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1)
2025-08-30T05:25:24.106Z  INFO 1626 --- [           main] com.loksai.demo.DemoApplicationTests     : No active profile set, falling back to 1 default profile: "default"
2025-08-30T05:25:26.093Z  INFO 1626 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page: ServletContext resource [/index.html]
2025-08-30T05:25:27.170Z  INFO 1626 --- [           main] com.loksai.demo.DemoApplicationTests     : Started DemoApplicationTests in 3.643 seconds (process running for 5.952)
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[[1;34mINFO[m] [1;32mTests run: [0;1;32m1[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.684 s -- in com.loksai.demo.[1mDemoApplicationTests[m
[[1;34mINFO[m] 
[[1;34mINFO[m] Results:
[[1;34mINFO[m] 
[[1;34mINFO[m] [1;32mTests run: 1, Failures: 0, Errors: 0, Skipped: 0[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-war-plugin:3.4.0:war[m [1m(default-war)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Packaging webapp
[[1;34mINFO[m] Assembling webapp [demo] in [/home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT]
[[1;34mINFO[m] Processing war project
[[1;34mINFO[m] Copying webapp resources [/home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/src/main/webapp]
[[1;34mINFO[m] Building war: /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.2.3:repackage[m [1m(repackage)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Replacing main artifact /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war with repackaged archive, adding nested dependencies in BOOT-INF/.
[[1;34mINFO[m] The original artifact has been renamed to /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war.original
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  19.868 s
[[1;34mINFO[m] Finished at: 2025-08-30T05:25:34Z
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] sh
+ docker build -t akhilpagadapoola/pl-javawebappimg .
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  125.4MB

Step 1/3 : FROM tomcat:8.0
 ---> ef6a7c98d192
Step 2/3 : COPY ./target/*.war /usr/local/tomcat/webapps
 ---> 709b1404b830
Step 3/3 : EXPOSE 8080
 ---> Running in 9acb82221b92
 ---> Removed intermediate container 9acb82221b92
 ---> dec37a769de9
Successfully built dec37a769de9
Successfully tagged akhilpagadapoola/pl-javawebappimg:latest
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Login2DockerHub)
[Pipeline] sh
+ echo ****
+ docker login -u akhilpagadapoola --password-stdin
WARNING! Your password will be stored unencrypted in /home/devopsadmin/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credential-stores

Login Succeeded
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Publish_to_Docker_Registry)
[Pipeline] sh
+ docker push akhilpagadapoola/pl-javawebappimg
Using default tag: latest
The push refers to repository [docker.io/akhilpagadapoola/pl-javawebappimg]
e28b352b923e: Preparing
d0f3f4011f28: Preparing
583dc95d65c9: Preparing
f26731984f9b: Preparing
9f052711b40a: Preparing
81242e1e644e: Preparing
39a6e47c4ae6: Preparing
fc6174f0df4a: Preparing
425325c72d90: Preparing
c596d5191368: Preparing
daf45b2cad9a: Preparing
8c466bf4ca6f: Preparing
81242e1e644e: Waiting
39a6e47c4ae6: Waiting
fc6174f0df4a: Waiting
425325c72d90: Waiting
c596d5191368: Waiting
daf45b2cad9a: Waiting
8c466bf4ca6f: Waiting
f26731984f9b: Mounted from library/tomcat
583dc95d65c9: Mounted from library/tomcat
d0f3f4011f28: Mounted from library/tomcat
9f052711b40a: Mounted from library/tomcat
81242e1e644e: Mounted from library/tomcat
fc6174f0df4a: Mounted from library/tomcat
39a6e47c4ae6: Mounted from library/tomcat
425325c72d90: Mounted from library/tomcat
c596d5191368: Mounted from library/tomcat
daf45b2cad9a: Mounted from library/tomcat
8c466bf4ca6f: Mounted from library/tomcat
e28b352b923e: Pushed
latest: digest: sha256:d4d3e44491966383ba3f617c760fe62b627d2912c601ba733e7240ddde438683 size: 2837
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS


















