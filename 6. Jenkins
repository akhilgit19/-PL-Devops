########################
Day 13 : 29th July 2025
########################

	Jenkins Build Orchestration Tool ::::
	
	
	Continuous Integration : 			CI
	
	Continuous Delivery/Deployment :	Cd/CD
	
	
	Jenkins :::
	
	What is Jenkins :::
	
		Jenkins is Open-Source Build Orchestration Tool.
		Used to Automate the End-to-End Application Build and Deployments
		Using Jenkins we can create CI/CD Pipelines 
		
	Jenkins Architecture ::
	
		Jenkins is based on Master-Slave Architecture :::
		
			Jenkins_Master (VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_SlaveNode
											==> Install Git, JDK, Jenkins
											==> Install Application Build Tools(Maven)
										
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts
											==> Install Application Build Tools
						
			
	Scenario1 :
	
		Client :
		
			Java Web Application Development
			
			Change Request : 1 or 2 CR per week / 
			
			- Less no. of Application Builds and Production release 
			

			Jenkins_Master (VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_Master
											==> Install Git, JDK, Jenkins
											==> Install Application Build Tools(Maven)
											
											
	Scenario2 :
	
		Client :
		
			Java, .Net, python, Node-js, Angular, ruby, ......
			
			Frequency of Builds and Release are huge
			
			
			Jenkins_Master Np(VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_SlaveNode
												==> Install Git, JDK, Jenkins											
											
				Jenkins_SlaveNode1 (VM1)		==> Java Build Tools					
				Jenkins_SlaveNode1 (VM1.1)		==> Java Build 						
				Jenkins_SlaveNode1 (VM2)		==> Python
				Jenkins_SlaveNode1 (VM3)		==> .Net
				Jenkins_SlaveNode1 (VM4)		==> Angular/Nodejs
				Jenkins_SlaveNode1 (VM5)		==> Ruby
				

			Target_Server(QA)
				
			Target_Server(UAT)

			Target_Server(PROD)

	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments
		Notify 
		Deploy to Prod 
		



	Working with Jenkins :::
	
	
		Developers' Perspective :
			- All Developers are just the Consumers of Jenkins Tools and Services.
			- Developers can just execute/cancel/view the Jenkins jobs/Status.		
		
		
		DevOps Perspective :	
	
			Roles & Responsibilies of DevOps Team :			
			
			Jenkins Administration 
				- Installation of Jenkins
				- Global System Configurations 
				- Plugins Management 
				- Tools Management 
				- User Management 					# To enable User Authentication
				- Security Management				# To enable User Authorization
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 
				- Onboard Applications to use Jenkins CICD Projects  
				- Periodic Upgrade of Jenkins and its plugins 
				- Periodic Backup 
				- Troubleshooting the Issues!	
	
	
	- Installation of Jenkins :::
	
		--> Jenkins can be installed in Linux - Ubuntu Machine AMI - v22.04
				https://www.jenkins.io/doc/book/installing/
				
				https://www.jenkins.io/doc/book/installing/linux/
				
			Jenkins run as a service, it runs in default port 8080
			

	
	- Global System Configurations ::
	
		--> Define the default properties and external resource connections to Jenkins.
	
	
	- Plugins Management ::	
	
		--> Enable/Disable/Remove/Install/Upgrade Plugins!
	
	
	Install & Configure Jenkins Server :

	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/
				
Launch AWS EC2 Instance - AMI - Ubuntu 22.04v 
t2.micro - Instance Type 
				
#Allow All Traffic for Demo!

Updated Inbound Rule - Port 8080 

1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y

sudo apt install git -y 					# To install git if required
git --version 

sudo apt install openjdk-17-jre -y 			# previous version
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y



3. Perform Post_Installation Activities :::

jenkins --version 

systemctl status jenkins 

# systemctl stop jenkins 
# systemctl start jenkins 
# systemctl restart jenkins 
# systemctl enable jenkins 

/var/lib/jenkins 		# Default Installation Dir of Jenkin on Linux Box



Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://15.207.19.193:8080/

sudo -i

cat /var/lib/jenkins/secrets/initialAdminPassword


Next :::
	
				- Tools Management 
				- User Management 					# To enable User Authentication
				- Security Management				# To enable User Authorization
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 	
	
########################
Day 14 : 31st July 2025
########################	


				- Tools Management 
				
				- User Management 					# To enable User Authentication
				- Security Management				# To enable User Authorization
				
				
				- Credential Management 			# To save the credentials used to access remote servers
													# Eg.: Build Servers, DockerHub, Github, Kubernetes Cluster Credentials
				
				
				- Creation Jenkins Projects on Jenkins Master
	
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 	
	
	
	- Creation Jenkins Projects on Jenkins Master ::::
	
		- Free Style Project 		
			- These are based on the Manual Configurations
			- This is just for internal tools/plugins validations 
			- Do not use this to onboard the applications.
			
			
			
		Handling Variables :::
		
			- Environment Variables ::
				- Pre-Defined Variables used by Jenkins.
				
					echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
					
					Syntax: 
					
								To Print the value of any variable :
								
									- "${var1}"
					
			
			- User Defined Variables ::
				- To prameterize the Jenkins Projects!
				- Used to process run-time inputs
			
			
				var1 = "Hello"
				
		
			
		
		- Pipeline Project :
		
			- It is used to automate CI/CD Pipeline executions 
			- This can be created using groovy scripts
			- To Automate Application Builds and Deployments 
			- This CI/CD Workflow can be automated.
					CI/CD Workflow :::
					
						SCM_Checkout 
						Application Build 
						Unit Testing 
						Create Artifacts 
						Promote the Application to Test Environments
						Notify 
						Deploy to Prod
						
			
			Two Types of Pipeline Projects :
			
				- Scripted Pipelines 	
					- Based on typical groovy scripts
					
				
				- Declarative Pipelines 
					- This based on the parameters, auto-generate the groovy script to any task.
					- Snippet generator!
					- Declarative Pipelines are easy to create and maintain
			
						
		
	Alternative to Jenkins :
	
		gitlab-ci 
		azPipelines
		aws CodePipelines 
		bamboo 
		
		-> *.yaml / groovy / shell / python
		

Next ::

	- Working with Pipeline Projects 
	- Master/Slave Node Configurations
	- Creation CICD Pipeline Projects 	

########################
Day 15 : 1st August 2025
########################	

Jenkins Master server:
------------------------
- Connect to the Jenkins Master server
- login as root user: sudo -i
- copy the public ip and open in browser http://publicip:8080

	- Working with Pipeline Projects :::
	
		Two Types of Pipeline Projects :
		
			- Scripted Pipelines 	
				- Based on typical groovy scripts
				
			
			- Declarative Pipelines 
				- This based on the parameters, auto-generate the groovy script to any task.
				- Snippet generator!
				- Declarative Pipelines are easy to create and maintain

		CI/CD Workflow :::
		
			SCM_Checkout 
			Application Build 
			Unit Testing 
			Create Artifacts 
			Promote the Application to Test Environments
			Notify 
			Deploy to Prod 

- click on new item in the jenkins dashboard
- Enter an Item name- PL-Pipeline-Proj1
- choose pipeline and click on ok
- click on pipeline
- In definition- choose pipeline script

Declarative Pipeline :

pipeline {
    agent any

    stages {
        stage('stg2') {
            steps {
                echo 'Hello World'
            }
        }

         stage('stg2') {
            steps {
                echo 'Hello Everyone'
            }
        }
    }
}	


2nd build:
Declarative Pipeline :


pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy Artifacts to QA Testing Environment'
            }
        }
    }
}	


Console output:
-------------------
Started by user admin
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/PL-Pipeline-Proj1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (stg1)
[Pipeline] echo
Hello World
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (stg2)
[Pipeline] echo
Hello Everyone
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS

2nd build:
------------
Started by user admin
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/PL-Pipeline-Proj1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (SCM_Checkout)
[Pipeline] echo
Perform SCM_Checkout from github repository
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Application Build)
[Pipeline] echo
Perform Maven Application Build
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to QA Environment)
[Pipeline] echo
Deploy Artifacts to QA Testing Environment
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS




- click on apply and click on save
- click on your pipeline dashboard
- click on build now
- click on that green tick mark you will the ouput log
- click on stages, It will show you the graphical view of stages


	- Master/Slave Node Configurations :::
	
		Jenkins_Master (VM) 		# Create CICD Pipeline Projects/Jobs and schedule to run in the Nodes
									# Install git, jdk, jenkins 
									
			Jenkins_SlaveNode (VM)	# Perform Application Build 
-									# git, jdk, maven
#Configure Slave Node1 for Java Maven App. :
--------------------------------------------------
Launch an Ubuntu Machine : v22.04

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-17-jre -y
java -version						

Install GIT :

sudo apt install git -y			
git --version 

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 

mvn --version

Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
#ssh-keygen -t rsa -b 2048 -m PEM								#ubuntu 20.04

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*


-
Login to Jenkins - Manage Jenkins - Attach the Slave Node to jenkins Master

	Goto to Manage Jenkins 
		Select Nodes 
			On Nodes Dashboard, Click on New Node
				Give Node Name- JavaMvnBuildServer1, and choose permanent agent.

- it will redirect to configuration page
- give the description- JavaMvnBuildServer1- This is to build java maven appli ation
- Number of executors- 3
- Remote root directory - /home/devopsadmin( home directory devopsadmin user which we created in slave node)
- labels- slave1
- Launch method - Launch agents via ssh
-
SSH Connection :
- Host Name : <private_IP (of slave node)>
- credentials- click on add and click on jenkins, it will take to jenkins credentials provider
Public key/authorized_keys
       Private Key 

- domain - global credentials 
- kind- ssh username with private eky
- id -slave1_cred
- User Name :devopsadmin
- click on privatekey, click on add , now goto slave node - cat id_ecdsa
- copy the entire private key and paste their
- click on add
- now in the drop of credentials select slave1_cred
- Host key verification strategy- manually trusted key verification strategy
- choose require manual verification of initial connection 
-  click on save

- click on JavaMvnBuildServer1	
- clic on trust ssh host key( it appears for very first time)
- it asks for the manual verfication, click on yes
- Now it will take the private host username and check with autorized keys and enable connection

- Now click on new item- PL-CICD-Pipeline-Project1
- click on pipeline, click on ok
- In general, In the description - Java_Maven- CICD Pipeline project
- In pipeline script , provide below script
Note: 
if you dont below commands to put in the groovy script, click on pipeline sript
#sample step git:GIT
#give the git url
#Branch master and click on generate pipeline script you will get the code
git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            
#same for sh: shell script
#mvn clean package and you will get command
  sh 'mvn clean package'


pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy Artifacts to QA Testing Environment'
            }
        }
    }
}

- Now click on build
- now go to your build sever
- cd workspace/
- ls
- cd PL-CICD-Pipeline-Project1
- ls (you will see all the files from git repo)

Next ::::


	
		Jenkins_Master (VM) 		# Create CICD Pipeline Projects/Jobs and schedule to run in the Nodes
									# Install git, jdk, jenkins 
									
			Jenkins_SlaveNode (VM)	# Perform Application Build 
									# git, jdk, maven
																		
		QA_Test_Server(Target Server - Tomcat WAS)		
		
		Build Triggers 
		
		Email Notifications
