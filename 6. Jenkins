########################
Day 13 : 29th July 2025
########################

	Jenkins Build Orchestration Tool ::::
	========================================
	        Continuous Integration : 			CI
	
	        Continuous Delivery/Deployment :	Cd/CD
	
	Jenkins :::
	=============
	What is Jenkins :::
	====================
		- Jenkins is Open-Source Build Orchestration Tool.
		- Used to Automate the End-to-End Application Build and Deployments
		- Using Jenkins we can create CI/CD Pipelines 
     
		
	Jenkins Architecture ::
	========================================
		Jenkins is based on Master-Slave Architecture :::
		====================================================
			Jenkins_Master (VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_SlaveNode
											==> Install Git, JDK, Jenkins
											==> Install Application Build Tools(Maven)
										
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts
											==> Install Application Build Tools
						
			
	Scenario1 :
	========================================
		Client :
		
			Java Web Application Development
			
			Change Request : 1 or 2 CR per week / 
			
			- Less no. of Application Builds and Production release 
			

			Jenkins_Master (VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_Master
											==> Install Git, JDK, Jenkins
											==> Install Application Build Tools(Maven)
											
											
	Scenario2 :
	========================================
		Client :
		
			Java, .Net, python, Node-js, Angular, ruby, ......
			
			Frequency of Builds and Release are huge
			
			
			Jenkins_Master Np(VM)				==> To Create Jenkins CI/CD Pipeline Jobs/Projects & Schedule to run in Jenkins_SlaveNode
												==> Install Git, JDK, Jenkins											
											
				Jenkins_SlaveNode1 (VM1)		==> Java Build Tools					
				Jenkins_SlaveNode1 (VM1.1)		==> Java Build 						
				Jenkins_SlaveNode1 (VM2)		==> Python build tools
				Jenkins_SlaveNode1 (VM3)		==> .Net build tools
				Jenkins_SlaveNode1 (VM4)		==> Angular/Nodejs build tools
				Jenkins_SlaveNode1 (VM5)		==> Ruby build tools
				

			Target_Server(QA)
				
			Target_Server(UAT)

			Target_Server(PROD)

	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments (QA, UAT,PROD)
		Notify 
		Deploy to Prod 
		



	Working with Jenkins :::
	========================================
	
		Developers' Perspective :
        =========================
			- All Developers are just the Consumers of Jenkins Tools and Services.
			- Developers can just execute/cancel/view the Jenkins jobs/Status.		
		
		
		DevOps Perspective :	
	   ======================
			Roles & Responsibilies of DevOps Team :			
			
			Jenkins Administration 
				- Installation of Jenkins
				- Global System Configurations 
				- Plugins Management 
				- Tools Management 
				- User Management 					# To enable User Authentication
				- Security Management				# To enable User Authorization
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 
				- Onboard Applications to use Jenkins CICD Projects  
				- Periodic Upgrade of Jenkins and its plugins 
				- Periodic Backup 
				- Troubleshooting the Issues!	
	
	
	- Installation of Jenkins :::
	  ===============================
		--> Jenkins can be installed in Linux - Ubuntu Machine AMI - v22.04
				https://www.jenkins.io/doc/book/installing/
				
				https://www.jenkins.io/doc/book/installing/linux/
				
			Jenkins run as a service, it runs in default port 8080
			

	Dashboard:
    ===========
          Build Executor Status:
           =========== ===========
         - if you 0/2 That means I want to run 2 jobs parallely.
           Build Queue:
           ===========
         - if user triggers 4 jobs, Then
           2 jobs will trigger and other 2 jobs will in build queue

Manage Jenkins:
=================
	- Global System Configurations ::
	 ==========================================================
        - click on manage jenkins, system configuration.
		--> Define the default properties and external resource connections to Jenkins.

        - you can set defualt executors 0/5, click on apply and save
        - you can see default directory - /var/lib/jenkins
        - system message- test Jenkins server
        - you can set defualt jenkins url
        - you can set the external resource configurations
        - eg QA server , UAT server or email configurations.
       

	
	- Plugins Management ::	
	 ===============================
		--> Enable/Disable/Remove/Install/Upgrade Plugins!

     - clikc on manage jenkins, click on plugins
     - you will see updates, available plugins , installed and advanced plugins
     - if you install plugins you can see installed plugins
     - There you can enable or disable the plugin which u have installed or uninstall
       health shows status of the plugin like comptability along the current version
     - If i want to install maven, need to click on available plugins
       select the plugin and click on install
     - if you click on  docker plugin, click on released
       you can see various versions of playings, understand the release notes , dependency updates
     - if any version u want to install right clik on version no and copy the  link addresss
     - go to your plugin management , go to advanced settings, paste the url and clik on deploy


	
	Install & Configure Jenkins Server :
    ================================================
	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/


Launch AWS EC2 Instance - AMI - Ubuntu 22.04v 
t2.micro - Instance Type 
				
#Allow All Traffic for Demo!

Updated Inbound Rule - Port 8080 

1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y

sudo apt install git -y 					# To install git if required
git --version 

sudo apt install openjdk-17-jre -y 			# previous version
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y



3. Perform Post_Installation Activities :::

jenkins --version 

systemctl status jenkins 

# systemctl stop jenkins 
# systemctl start jenkins 
# systemctl restart jenkins 
# systemctl enable jenkins 

/var/lib/jenkins 		# Default Installation Dir of Jenkin on Linux Box



Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://15.207.19.193:8080/

sudo -i

cat /var/lib/jenkins/secrets/initialAdminPassword

Lab:
=====
- Launch AWS EC2 Instance - AMI - Ubuntu 22.04v 
- Name: PL-Jenkins_Master
- AMI - Ubuntu 22.04 version
- t2.micro - Instance Type 
- keypair
- defualt network setting vpc
- click on security groups
  ssh          port 22
  custom tcp   port 8080
- login into PL-Jenkins_Master
- sudo -i 
- sudo apt update -y
- sudo apt install git -y 
  git --version 
root@ip-172-31-29-205:~# git --version
git version 2.43.0
root@ip-172-31-29-205:~# 

-
We install JDK based on application requirement. You can check the pom.xml for java.version
https://github.com/akhilgit19/java-webapp-project.git
- sudo apt install openjdk-17-jre -y 			# previous version 
  java -version						

root@ip-172-31-29-205:~# java -version
openjdk version "17.0.16" 2025-07-15
OpenJDK Runtime Environment (build 17.0.16+8-Ubuntu-0ubuntu124.04.1)
OpenJDK 64-Bit Server VM (build 17.0.16+8-Ubuntu-0ubuntu124.04.1, mixed mode, sharing)
root@ip-172-31-29-205:~# 


- #Install Jenkins:
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
- 
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
- sudo apt-get update
- sudo apt-get install jenkins -y
- cd /var/lib/jenkins/
- pwd
/var/lib/jenkins  (Default directory for jenkins
- ls
- cd plugins/
- When u install jenkins, it comes with defualt plugins, 


-  jenkins --version 
root@ip-172-31-29-205:~# jenkins --version 
2.516.2
root@ip-172-31-29-205:~# 

-   systemctl status jenkins 

# systemctl stop jenkins 
# systemctl start jenkins 
# systemctl restart jenkins 
# systemctl enable jenkins 

- http://publicip:8080
- cat /var/lib/jenkins/secrets/initialAdminPassword
- click on install suggested plugins
- you can check the same in 
cd /var/lib/jenkins/plugins/
- Create First admin user
  Username- Akhil
  Password- admin
  Confirm Password- admin
  Full name akhilp
  Email address akhilpagadapoola123@gmail.com
 

- In available plugins, Maven Integration plugin, click on install
- In available plugins, Publish Over ssh plugin, click on install



Next :::
	
				- Tools Management 
				- User Management 					# To enable User Authentication
				- Security Management				# To enable User Authorization
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 	
	
########################
Day 14 : 31st July 2025
########################	


				- Tools Management 
				
				- User Management 	# To enable User Authentication
				- Security Management	# To enable User Authorization
				
				
				- Credential Management  # To save the credentials used to access remote servers
					# Eg.: Build Servers, DockerHub, Github, Kubernetes Cluster Credentials
				
				
				- Creation Jenkins Projects on Jenkins Master
	
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 	

- Tools Mnagement:
 ================================================
- Login into master node
- default path for jenkins - cd /var/lib/jenkins/
- ls (you can see lot of plugins installed)
- Now open master node jenkins in the browser  http://publicip:8080
- click on manage jenkins
- click on tools 
- When ever you install any tools, You have to configure in jenkings
- Suppose if you want to install maven,You can see maven installations, click on add
- name -maven
- Maven_Home( maven homedirectory)
- click on apply and save
- Like wise, JDK, Gradle , Git etc

UserManagement
 ================================================
- click on manage jenkins
- In secruity click on users (create/delete/modify users that can log in to this jenkins)
- You can see users dasboard to maintain users profiles
- actual location of database is
- login to jenkings master
- cd /var/lib/jenkins
- ls
- cd users
- ls
var/lib/jenkins/users# ls
Loksai_8055814431391192506  users.xml
- go to the directories of default
cd Loksai_8055814431391192506 
- ls
config.xml
-cat config.xml (view the xml code where you can see users id, users name and password )
-  If you want to create a new user, go to user management , click on create usrs
- Username -user1, password, fullname -user1, email address
- click on createuser
- if you want to change the details click on setting button, it will take to user configuration deashboard
- In security of users dashboard , you can change password.

Security Management	
 ================================================
- In jenkins dashboard, Manage jenkins, In security, click on security
- There you can see authentication and authorization
- For authentication jenkins uses it's own database, (xml))
- For authorization - Matrix based security
- click on adduser- user1
- now you can choose as per your requirement (overall credentials, agents,jobs, run,view, scm, metrics)


Credential Management
 ================================================
- depends on remote server. iF u want to access remote server or ssh connection , you can used credential

- click on manage jenkins
- click on credentials, click on global, click on add credential
- kind ssh username with privatekey

For example:
- domain - global credentials 
- kind- ssh username with private eky
- id -slave1_cred
- User Name :devopsadmin
- click on privatekey, click on add , now goto slave node - cat id_ecdsa
- copy the entire private key and paste their
- click on add
- now in the drop of credentials select slave1_cred
- Host key verification strategy- manually trusted key verification strategy
- choose require manual verification of initial connection 
-  click on save


Jenkins Projects:
 ===================
	- Creation Jenkins Projects on Jenkins Master ::::
	
		- Free Style Project 	
          =====================
			- These are based on the Manual Configurations
			- This is just for internal tools/plugins validations 
			- Do not use this to onboard the applications.
			
		
			- Environment Variables :
				- Pre-Defined Variables used by Jenkins.
				
					echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
					
					Syntax: 
					
								To Print the value of any variable :
								
									- "${var1}"


			- User Defined Variables ::
				- To prameterize the Jenkins Projects!
				- Used to process run-time inputs
			
			
				var1 = "Hello"
				
		
		- Pipeline Project :
		 =====================
			- It is used to automate CI/CD Pipeline executions 
			- This can be created using groovy scripts
			- To Automate Application Builds and Deployments 
			- This CI/CD Workflow can be automated and used in onboarding applications
					CI/CD Workflow :::
					
						SCM_Checkout 
						Application Build 
						Unit Testing 
						Create Artifacts 
						Promote the Application to Test Environments
						Notify 
						Deploy to Prod
						
			
			Two Types of Pipeline Projects :
			
				- Scripted Pipelines 	
					- Based on typical groovy scripts
					
				
				- Declarative Pipelines 
					- This based on the parameters, auto-generate the groovy script to any task.
					- Snippet generator!
					- Declarative Pipelines are easy to create and maintain

				
		
	Alternative to Jenkins :
	
		gitlab-ci 
		azPipelines
		aws CodePipelines 
		bamboo 
		
		-> *.yaml / groovy / shell / python

Freestyle Project:
------------------------
- In jenkins dashboard
- click on new item name- PL-FreeStyle-Proj1
- choose freestyle project, click ok
- click on general, you can see description, -Sample Free styel project
- you  can see source code manangement for scm checkout
- you can see triggers, environment, build steps to perform the tasks
- you can click on add build step and choose execute shell as well
- echo "Hello everyone" >file1.txt
- click no apply and save
- click on job dashboard, click on buildnow and clickon  build outputs(where u see the green tick)
- You can see the output under this path your workspace get created /var/lib/jenkins/workspace/PL-FreeStyle-Proj1

Started by user akhilp
Running as SYSTEM
Building in workspace /var/lib/jenkins/workspace/PL-FreeStyle-Proj1
[PL-FreeStyle-Proj1] $ /bin/sh -xe /tmp/jenkins16874361542080649431.sh
+ echo Hello everyone
Hello everyone
Finished: SUCCESS

Started by user akhilp
Running as SYSTEM
Building in workspace /var/lib/jenkins/workspace/PL-FreeStyle-Proj1
[PL-FreeStyle-Proj1] $ /bin/sh -xe /tmp/jenkins12417678379864096003.sh
+ echo Hello everyone
Finished: SUCCESS

Output in the master server: /var/lib/jenkins/workspace/PL-FreeStyle-Proj1

root@ip-172-31-29-205:/var/lib/jenkins# cd workspace
root@ip-172-31-29-205:/var/lib/jenkins/workspace# ls
PL-FreeStyle-Proj1
root@ip-172-31-29-205:/var/lib/jenkins/workspace# cd PL-FreeStyle-Proj1
root@ip-172-31-29-205:/var/lib/jenkins/workspace/PL-FreeStyle-Proj1# ls
file1.txt
root@ip-172-31-29-205:/var/lib/jenkins/workspace/PL-FreeStyle-Proj1# cat file1.txt
Hello everyone
root@ip-172-31-29-205:/var/lib/jenkins/workspace/PL-FreeStyle-Proj1# 


Environment Variables:
----------------------
- In any project build step, you can see list of avaialbel environment variables
- go to this site and copy build tag syntax
publicIP:8080/env-vars.html/
- echo "Hello everyone" >> file1.txt
- echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}" >> file1.txt

Output 
Started by user akhilp
Running as SYSTEM
Building in workspace /var/lib/jenkins/workspace/PL-FreeStyle-Proj1
[PL-FreeStyle-Proj1] $ /bin/sh -xe /tmp/jenkins16321883868178186530.sh
+ echo Hello everyone
+ echo jenkins-PL-FreeStyle-Proj1-3
Finished: SUCCESS


User defined Variables
------------------------
- In job dashboard, click on general and choose this project is parameterized, You can click on add parameter 
  Any parameter you choose it will  have 3 tags 
  Name - variable name,
  defulat value - 
  Description- 
- Name-envi
- default value -QA
- Description - Enter valid Environment NAME: QA/UAT/PROD
- add this steup in build, echo "User-Defined vairalbes-${envi}"
- click on build, it will ask for value to provide and click on ok you will see the variable given in the output.

Started by user akhilp
Running as SYSTEM
Building in workspace /var/lib/jenkins/workspace/PL-FreeStyle-Proj1
[PL-FreeStyle-Proj1] $ /bin/sh -xe /tmp/jenkins3153017628177762721.sh
+ echo Hello everyone
+ echo jenkins-PL-FreeStyle-Proj1-4
+ echo User-Defined vairalbes-QA
User-Defined vairalbes-QA
Finished: SUCCESS



Next ::

	- Working with Pipeline Projects 
	- Master/Slave Node Configurations
	- Creation CICD Pipeline Projects 	

########################
Day 15 : 1st August 2025
########################	

Jenkins Master server:
------------------------
- Connect to the Jenkins Master server
- login as root user: sudo -i
- copy the public ip and open in browser http://publicip:8080

	- Working with Pipeline Projects :::
	
		Two Types of Pipeline Projects :
		
			- Scripted Pipelines 	
				- Based on typical groovy scripts
				
			
			- Declarative Pipelines 
				- This based on the parameters, auto-generate the groovy script to any task.
				- Snippet generator!
				- Declarative Pipelines are easy to create and maintain

		CI/CD Workflow :::
		
			SCM_Checkout 
			Application Build 
			Unit Testing 
			Create Artifacts 
			Promote the Application to Test Environments
			Notify 
			Deploy to Prod 

- click on new item in the jenkins dashboard
- Enter an Item name- PL-Pipeline-Proj1
- choose pipeline and click on ok
- click on pipeline
- In definition- choose pipeline script

Declarative Pipeline :

pipeline {
    agent any

    stages {
        stage('stg1') {
            steps {
                echo 'Hello World'
            }
        }

         stage('stg2') {
            steps {
                echo 'Hello Everyone'
            }
        }
    }
}	


2nd build:
Declarative Pipeline :


pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy Artifacts to QA Testing Environment'
            }
        }
    }
}	


Console output of 1st build:
----------------------------
Started by user akhilp
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/PL-Pipeline-Proj1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (stg1)
[Pipeline] echo
Hello World
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (stg2)
[Pipeline] echo
Hello Everyone
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS

2nd build:
------------
Started by user akhilp
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/PL-Pipeline-Proj1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (SCM_Checkout)
[Pipeline] echo
Perform SCM_Checkout from github repository
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Application Build)
[Pipeline] echo
Perform Maven Application Build
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to QA Environment)
[Pipeline] echo
Deploy Artifacts to QA Testing Environment
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS





- click on apply and click on save
- click on your pipeline dashboard
- click on build now
- click on that green tick mark you will the ouput log
- click on stages, It will show you the graphical view of stages


	- Master/Slave Node Configurations :::
	
		Jenkins_Master (VM) 		# Create CICD Pipeline Projects/Jobs and schedule to run in the Nodes
									# Install git, jdk, jenkins 
									
			Jenkins_SlaveNode (VM)	# Perform Application Build 
-									# git, jdk, maven
#Configure Slave Node1 for Java Maven App. :
--------------------------------------------------
- name - PL-Jenkins_SlaveNode-1
- Launch an Ubuntu Machine : v22.04
- instance type - t2 micro
- renaming parameters stays defualt
-
sudo -i
apt update -y 
- Install Java ::
sudo apt update -y 
sudo apt install openjdk-17-jre -y
java -version						
-  Install GIT :

sudo apt install git -y			
git --version 
- Install Maven - Build Tool :
https://maven.apache.org/install.html
sudo apt install maven -y 
mvn --version


- Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
#ssh-keygen -t rsa -b 2048 -m PEM								#ubuntu 20.04

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*


-
Login to Master Jenkins - Manage Jenkins - Attach the Slave Node to jenkins Master

-Goto to Manage Jenkins 
		Select Nodes 
			On Nodes Dashboard, Click on New Node
				Give Node Name- JavaMvnBuildServer1, and choose permanent agent.

- it will redirect to configuration page
- give the description- JavaMvnBuildServer1- This is to build java maven application
- Number of executors- 3
- Remote root directory - /home/devopsadmin( home directory devopsadmin user which we created in slave node)
- labels- slave1
- Launch method - Launch agents via ssh
-
SSH Connection :
- Host Name : <private_IP (of slave node)>
- credentials- click on add and click on jenkins, it will take to jenkins credentials provider
Public key/authorized_keys
       Private Key 

- domain - global credentials 
- kind- ssh username with private eky
- id -slave1_cred
- User Name :devopsadmin
- click on privatekey, click on add , now goto slave node - cat id_ecdsa
- copy the entire private key and paste their
- click on add
- now in the drop of credentials select slave1_cred
- Host key verification strategy- manually trusted key verification strategy
- choose require manual verification of initial connection 
-  click on save

- click on JavaMvnBuildServer1	
- click on trust ssh host key( it appears for very first time)
- it asks for the manual verfication, click on yes
- Now it will take the private host username and check with autorized keys and enable connection

- Now click on new item- PL-CICD-Pipeline-Project1
- click on pipeline, click on ok
- In general, In the description - Java_Maven- CICD Pipeline project
- In pipeline script , provide below script
Note: 
if you dont below commands to put in the groovy script, click on pipeline sript
#sample step git:GIT
#give the git url
#Branch master and click on generate pipeline script you will get the code
git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            
#same for sh: shell script
#mvn clean package and you will get command
  sh 'mvn clean package'


pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy Artifacts to QA Testing Environment'
            }
        }
    }
}

- Now click on build
- now go to your build sever
- cd workspace/
- ls
- cd PL-CICD-Pipeline-Project1
- ls (you will see all the files from git repo)


Output:
----------
Started by user akhilp
[Pipeline] Start of Pipeline
[Pipeline] node
Running on JavaMvnBuildServer1 in /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (SCM_Checkout)
[Pipeline] echo
Perform SCM_Checkout from github repository
[Pipeline] git
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git
 > git init /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1 # timeout=10
Fetching upstream changes from https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
 > git fetch --tags --force --progress -- https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision 353876657987eb5da3702c042a912e50ad99add1 (refs/remotes/origin/master)
 > git config remote.origin.url https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b master 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
Commit message: "Create kdeploy.yaml"
First time build. Skipping changelog.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Application Build)
[Pipeline] echo
Perform Maven Application Build
[Pipeline] sh
+ mvn clean package
[[1;34mINFO[m] Scanning for projects...
Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/3.2.3/spring-boot-starter-parent-3.2.3.pom
Progress (1): 2.8/13 kB
Progress (1): 5.5/13 kB
Progress (1): 8.3/13 kB
Progress (1): 11/13 kB 
Progress (1): 13 kB   

Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar (752 kB at 1.0 MB/s)
[[1;34mINFO[m] Replacing main artifact /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war with repackaged archive, adding nested dependencies in BOOT-INF/.
[[1;34mINFO[m] The original artifact has been renamed to /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war.original
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  31.781 s
[[1;34mINFO[m] Finished at: 2025-08-28T05:30:43Z
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to QA Environment)
[Pipeline] echo
Deploy Artifacts to QA Testing Environment
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS


Target jar file in Slave/Build Server

devopsadmin@ip-172-31-30-243:~$ pwd
/home/devopsadmin
devopsadmin@ip-172-31-30-243:~$ ls
authorized_keys  caches  remoting  remoting.jar  workspace
devopsadmin@ip-172-31-30-243:~$ cd workspace
devopsadmin@ip-172-31-30-243:~/workspace$ ls
PL-CICD-Pipeline-Project1  PL-CICD-Pipeline-Project1@tmp
devopsadmin@ip-172-31-30-243:~/workspace$ cd PL-CICD-Pipeline-Project1
devopsadmin@ip-172-31-30-243:~/workspace/PL-CICD-Pipeline-Project1$ ls
Dockerfile  README.md  bin  mvnw  mvnw.cmd  pom.xml  src  target
devopsadmin@ip-172-31-30-243:~/workspace/PL-CICD-Pipeline-Project1$ cd target
devopsadmin@ip-172-31-30-243:~/workspace/PL-CICD-Pipeline-Project1/target$ ls
classes  demo-1.0-SNAPSHOT  demo-1.0-SNAPSHOT.war  demo-1.0-SNAPSHOT.war.original  generated-sources  generated-test-sources  maven-archiver  maven-status  surefire-reports  test-classes
devopsadmin@ip-172-31-30-243:~/workspace/PL-CICD-Pipeline-Project1/target$ 




Next ::::


	
		Jenkins_Master (VM) 		# Create CICD Pipeline Projects/Jobs and schedule to run in the Nodes
									# Install git, jdk, jenkins 
									
			Jenkins_SlaveNode (VM)	# Perform Application Build 
									# git, jdk, maven
																		
		QA_Test_Server(Target Server - Tomcat WAS)		
		
		Build Triggers 
		
		Email Notifications

########################
Day 16 : 4th August 2025
########################


Set-up Tomcat web application server 
========================================	
     Jenkins_Master (VM) 		# Create CICD Pipeline Projects/Jobs and schedule to run in the Nodes
					# Install git, jdk, jenkins 
								
     Jenkins_SlaveNode (VM)	       # Perform Application Build 
				       # git, jdk, maven
																		
    QA_Test_Server(VM) - (Target Server - Tomcat WAS)
		
		Environments ::
		
			Dev 
			
			Build 
			
			Target Environments
			
				QA / UAT / Prod 
				
				
																					

- Installation of Tom cat

Enable port 8080

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

https://tomcat.apache.org/

#####################Install TOMCAT Application Server on Ubuntu :::
- Name - PL- Tomcat_Server
- Launch New Node - Ubuntu - 22.04 ami 
- Instance type - t2.micro
- keypair
- Security : Enable port 8080
- Login to PL- Tomcat_Server
sudo -i
apt update -y
apt-get install default-jdk -y
java --version
cd /opt/
wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz
tar -xvzf /opt/apache-tomcat-8.5.99.tar.gz
mv apache-tomcat-8.5.99 tomcat
cd tomcat/bin/
./startup.sh			
cd /opt/tomcat/webapps
Note:  target directory for tomcat-/opt/tomcat/webapps


Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://13.127.8.53:8080/


###########################################

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin


#ssh-keygen

#for Ubuntu ::
#ssh-keygen -t rsa -b 2048 -m PEM								#ubuntu 20.04 

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

devopsadmin@ip-172-31-27-236://opt/tomcat$ ls
BUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  temp  webapps  work
devopsadmin@ip-172-31-27-236://opt/tomcat$ ll
total 160
drwxr-xr-x 9 root root  4096 Aug 28 07:37 ./
drwxr-xr-x 3 root root  4096 Aug 28 07:38 ../
-rw-r----- 1 root root 20913 Feb 14  2024 BUILDING.txt
-rw-r----- 1 root root  6210 Feb 14  2024 CONTRIBUTING.md
-rw-r----- 1 root root 57011 Feb 14  2024 LICENSE
-rw-r----- 1 root root  1726 Feb 14  2024 NOTICE
-rw-r----- 1 root root  3342 Feb 14  2024 README.md
-rw-r----- 1 root root  7139 Feb 14  2024 RELEASE-NOTES
-rw-r----- 1 root root 16505 Feb 14  2024 RUNNING.txt
drwxr-x--- 2 root root  4096 Aug 28 07:37 bin/
drwx------ 3 root root  4096 Aug 28 07:39 conf/
drwxr-x--- 2 root root  4096 Aug 28 07:37 lib/
drwxr-x--- 2 root root  4096 Aug 28 07:39 logs/
drwxr-x--- 2 root root  4096 Aug 28 07:37 temp/
drwxr-x--- 7 root root  4096 Feb 14  2024 webapps/
drwxr-x--- 3 root root  4096 Aug 28 07:39 work/
devopsadmin@ip-172-31-27-236://opt/tomcat$ 

Here is the command to change:
chown -R devopsadmin /opt/tomcat


root@ip-172-31-27-236:/opt/tomcat# ll
total 160
drwxr-xr-x 9 devopsadmin root  4096 Aug 28 07:37 ./
drwxr-xr-x 3 root        root  4096 Aug 28 07:38 ../
-rw-r----- 1 devopsadmin root 20913 Feb 14  2024 BUILDING.txt
-rw-r----- 1 devopsadmin root  6210 Feb 14  2024 CONTRIBUTING.md
-rw-r----- 1 devopsadmin root 57011 Feb 14  2024 LICENSE
-rw-r----- 1 devopsadmin root  1726 Feb 14  2024 NOTICE
-rw-r----- 1 devopsadmin root  3342 Feb 14  2024 README.md
-rw-r----- 1 devopsadmin root  7139 Feb 14  2024 RELEASE-NOTES
-rw-r----- 1 devopsadmin root 16505 Feb 14  2024 RUNNING.txt
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 bin/
drwx------ 3 devopsadmin root  4096 Aug 28 07:39 conf/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 lib/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:39 logs/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 temp/
drwxr-x--- 7 devopsadmin root  4096 Feb 14  2024 webapps/
drwxr-x--- 3 devopsadmin root  4096 Aug 28 07:39 work/

		What is Deployment ?
		
			==> Copy artifacts from one server to another server ?
		
		Source Server :							=====>		Target Server :

			Jenkins_SlaveNode1								Tomcat_Server 
			
				Source Path :									Target Path :
					target/*.war									/opt/tomcat/webapps
																/opt/tomcat/webapps/*.war

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Publish Over SSH Plugin is used to copt the artifacts from Jenkins Slave Node to Tomcat Server
		
Install Publish Over SSH Plugin in Jenkins Master.

- In Master server from the jenkins browser
- click on manage jenkings, click on plugins manager
- click on available plugins
- search for Publish Over SSH and install and restart jenkings so that it's configutrations can be enabled
- now go to jenkins dashboard, under manage jenkins, click on system
- In publish over ssh , in ssh server , click on add , Name- QA-Tomcat
- Hostname - [Private server of tomcat server]
- username devopsadmin
- remotedirectory- /opt/tomcat/webapps
- click on advanced
- choose use password authenticato or use a different key
- now go to your devopsadmin user homedirectory 
 /opt/tomcat/webapps cd ~
 cd .ssh/
- cat id_ecdsa, copy the private key
- attach in the key 
- click on test configuration 
- now save and exit


- now go to PL-CICD-Pipeline-Project1 job, click on pipeline syntax
- select publishChecks: publish cutomized checks to SCM platforms
- choose sshPublisher: send build artifacts over SSH
- Name  choose QA server same way you do it for UAT AND PROD
- sourcefiles- target/*.war
- remote directory - . ( . refers to webapp folder)
- remove prefix target/ 
- clickon  generate pipeline script
- copy the syntax and you can update in deploy to qa environment

test sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Tomcat', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/ ', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

prod sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Tomcat_WAS', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])


pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout from github repository'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Tomcat', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/ ', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
        }
    }
}

- copy the above pipelien and run the build
- In the deploy server, cd /opt/tomcat/webapps/
- ls (list the files)
- you can see the war file.
- copy the public ip of tomcat server publicip:8080/demo-1.0-SNAPSHOT/
- you will see the webpage


Output:
------

Started by user akhilp
[Pipeline] Start of Pipeline
[Pipeline] node
Running on JavaMvnBuildServer1 in /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (SCM_Checkout)
[Pipeline] echo
Perform SCM_Checkout from github repository
[Pipeline] git
The recommended git tool is: NONE
No credentials specified
Fetching changes from the remote Git repository
 > git rev-parse --resolve-git-dir /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/.git # timeout=10
 > git config remote.origin.url https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git # timeout=10
Fetching upstream changes from https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
 > git fetch --tags --force --progress -- https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision 353876657987eb5da3702c042a912e50ad99add1 (refs/remotes/origin/master)
Commit message: "Create kdeploy.yaml"
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D master # timeout=10
 > git checkout -b master 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
 > git rev-list --no-walk 353876657987eb5da3702c042a912e50ad99add1 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Application Build)
[Pipeline] echo
Perform Maven Application Build
[Pipeline] sh
+ mvn clean package
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--------------------------< [0;36mcom.loksai:demo[0;1m >---------------------------[m
[[1;34mINFO[m] [1mBuilding demo 1.0-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ war ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:3.3.2:clean[m [1m(default-clean)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Deleting /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Copying 1 resource from src/main/resources to target/classes
[[1;34mINFO[m] Copying 0 resource from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:compile[m [1m(default-compile)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :source
[[1;34mINFO[m] Compiling 2 source files with javac [debug release 17] to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:testCompile[m [1m(default-testCompile)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :dependency
[[1;34mINFO[m] Compiling 1 source file with javac [debug release 17] to target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:3.1.2:test[m [1m(default-test)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[[1;34mINFO[m] 
[[1;34mINFO[m] -------------------------------------------------------
[[1;34mINFO[m]  T E S T S
[[1;34mINFO[m] -------------------------------------------------------
[[1;34mINFO[m] Running com.loksai.demo.[1mDemoApplicationTests[m
08:02:06.353 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.loksai.demo.DemoApplicationTests]: DemoApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
08:02:06.583 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.loksai.demo.DemoApplication for test class com.loksai.demo.DemoApplicationTests

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.3)

2025-08-28T08:02:07.421Z  INFO 1464 --- [           main] com.loksai.demo.DemoApplicationTests     : Starting DemoApplicationTests using Java 17.0.16 with PID 1464 (started by devopsadmin in /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1)
2025-08-28T08:02:07.425Z  INFO 1464 --- [           main] com.loksai.demo.DemoApplicationTests     : No active profile set, falling back to 1 default profile: "default"
2025-08-28T08:02:09.384Z  INFO 1464 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page: ServletContext resource [/index.html]
2025-08-28T08:02:10.318Z  INFO 1464 --- [           main] com.loksai.demo.DemoApplicationTests     : Started DemoApplicationTests in 3.431 seconds (process running for 5.766)
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[[1;34mINFO[m] [1;32mTests run: [0;1;32m1[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.033 s -- in com.loksai.demo.[1mDemoApplicationTests[m
[[1;34mINFO[m] 
[[1;34mINFO[m] Results:
[[1;34mINFO[m] 
[[1;34mINFO[m] [1;32mTests run: 1, Failures: 0, Errors: 0, Skipped: 0[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-war-plugin:3.4.0:war[m [1m(default-war)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Packaging webapp
[[1;34mINFO[m] Assembling webapp [demo] in [/home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT]
[[1;34mINFO[m] Processing war project
[[1;34mINFO[m] Copying webapp resources [/home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/src/main/webapp]
[[1;34mINFO[m] Building war: /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.2.3:repackage[m [1m(repackage)[m @ [36mdemo[0;1m ---[m
[[1;34mINFO[m] Replacing main artifact /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war with repackaged archive, adding nested dependencies in BOOT-INF/.
[[1;34mINFO[m] The original artifact has been renamed to /home/devopsadmin/workspace/PL-CICD-Pipeline-Project1/target/demo-1.0-SNAPSHOT.war.original
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  19.446 s
[[1;34mINFO[m] Finished at: 2025-08-28T08:02:17Z
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to QA Environment)
[Pipeline] script
[Pipeline] {
[Pipeline] sshPublisher
SSH: Connecting from host [ip-172-31-30-243]
SSH: Connecting with configuration [QA-Tomcat] ...
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS

var file in output in tomcat 
-====================================
devopsadmin@ip-172-31-27-236:/opt/tomcat$ ls
BUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  temp  webapps  work
devopsadmin@ip-172-31-27-236:/opt/tomcat$ ll
total 160
drwxr-xr-x 9 devopsadmin root  4096 Aug 28 07:37 ./
drwxr-xr-x 3 root        root  4096 Aug 28 07:38 ../
-rw-r----- 1 devopsadmin root 20913 Feb 14  2024 BUILDING.txt
-rw-r----- 1 devopsadmin root  6210 Feb 14  2024 CONTRIBUTING.md
-rw-r----- 1 devopsadmin root 57011 Feb 14  2024 LICENSE
-rw-r----- 1 devopsadmin root  1726 Feb 14  2024 NOTICE
-rw-r----- 1 devopsadmin root  3342 Feb 14  2024 README.md
-rw-r----- 1 devopsadmin root  7139 Feb 14  2024 RELEASE-NOTES
-rw-r----- 1 devopsadmin root 16505 Feb 14  2024 RUNNING.txt
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 bin/
drwx------ 3 devopsadmin root  4096 Aug 28 07:39 conf/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 lib/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:39 logs/
drwxr-x--- 2 devopsadmin root  4096 Aug 28 07:37 temp/
drwxr-x--- 8 devopsadmin root  4096 Aug 28 08:02 webapps/
drwxr-x--- 3 devopsadmin root  4096 Aug 28 07:39 work/
devopsadmin@ip-172-31-27-236:/opt/tomcat$ cd webapps
devopsadmin@ip-172-31-27-236:/opt/tomcat/webapps$ ls


Build Triggers :::
=======================
- To Automate the Jenkins Pipeline Projects 
		
- When u go to job-PL-CICD-Pipeline-Project1 configuration, In general, 
- In triggersyou have build periodically, github webhook and poolscm
- 	
		-> Build Periodic					# https://crontab.guru/
		
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- The build is sheduled based on the crontab 


- select build periodic  and click on ? in fron of schedule, you can see the  schedule descripton
   *****



			Non-Prod Environments 										Prod Environment
			 Shd be available only during business hrs 
				DEV Servers 
				BUILD
				QA/UAT 														Prod Servers 
				
				
				8AM - 10PM 
		

		-> Github Webhook 
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL
		
				payload url:	http://65.0.122.168:8080/github-webhook/
					- latest Jenkins 
						http://<Public_IP_Address>:8080/github-webhook/
		

- got to the source code repository
- click on setting, click on webhooks
- click add webhooks
- payload URL http://jenkinsmasterpublicip:8080/github-webhook/
- content type application/json
- which events would  your like to trigger this webhookd?
 just the push event (deafult)
- click on add webhook
- and now go to the job configuration and in triggers, enable github hook trigger for GITScm POOLING
- click on save



                 -> Poll-SCM 
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			Eg.: 
			
				Test Cycles :::
				
				
				8AM - 12PM - 3PM 
				
- In triggers, clck on POLL SCM
- schedule- *****
	
		
		
	Email Notifications :::
	==========================
	
	
		In Jenkins Pipeline Jobs, Email Notifications can be done as a post build action.
		
		
		Stage{}
		post{
			success 
			failure 
			abort
		}
		
To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :





How to setup the Email Server in the Jenkins Config:
===========================================================

-goto manage jenkins -> system configuration 
- goto Email Notification 
		
-SMTP Server :
smtp.gmail.com

Default  user email suffix - @gmail.com

click on advanced setting

use SMTP Authentication
username akhilpagadapoola123@gmail.com
password-16 bytes tokem

use ssl

SMTP Port :: 465
Replay to address- akhilpagadapoola123@gmail.com


Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

App Password = 16 bytes of App Password. vaufxdfsdf asdf ltzr

What ? window
Which Appln - email		

- click on test configuration and enter your email id.
- now you can go to the pipeline project and click on syntax generator

- sample step mail: Mila
- To 
- cc
- bcc
- subject
- Body

-In the sample pipelinesyntax, click on global variables reference
- Take the below and copy in  body and subject 

copy mail to 'devops@acme.com'
 subject: "Job ${job_name}' (${BUILD_NUMBER}) is waiting  for input",
 body: "Please go to ${BUILD_URL} and verify the build"


-







pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
					
					
                }
              }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
                script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Tomcat_WAS', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
                
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: "jenkins-${JOB_NAME}-${BUILD_NUMBER}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Successful ', to: 'l@gmail.com'
                }
              }
        }
    }
}
